{
  // Place your snippets for typescriptreact here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Import React": {
    "prefix": "imr",
    "body": ["import * as React from 'react';"],
    "description": "Import React"
  },

  "Import React and Component": {
    "prefix": "imrc",
    "body": ["import * as React from 'react';", "import { Component } from 'react';"],
    "description": "Import React, { Component }"
  },

  "Import Pure Component": {
    "prefix": "impc",
    "body": ["import React, { PureComponent } from 'react';"],
    "description": "Import React, { PureComponent }"
  },

  "Class Component": {
    "prefix": "cc",
    "body": [
      "import * as React from 'react';",
      "",
      "interface I$1Props {",
      "\t$2",
      "}",
      "",
      "interface I$1State {",
      "\t$3",
      "}",
      "",
      "class $1 extends React.Component<I$1Props, I$1State> {",
      "\tpublic render() {",
      "\t\treturn ( $0 );",
      "\t}",
      "}",
      "",
      "export default $1;"
    ],
    "description": "Class Component"
  },

  "Class Component Constructor": {
    "prefix": "ccc",
    "body": [
      "import * as React from 'react';",
      "",
      "interface I$1Props {",
      "\t$2",
      "}",
      "",
      "interface I$1State {",
      "\t$3",
      "}",
      "",
      "class $1 extends React.Component<I$1Props, I$1State> {",
      "\tconstructor(props: I$1Props) {",
      "\t\tsuper(props);",
      "\t\tthis.state = { $4: $5 };",
      "\t}",
      "\tpublic render() {",
      "\t\treturn ( $0 );",
      "\t}",
      "}",
      "",
      "export default $1;"
    ],
    "description": "Class Component with Constructor"
  },

  "Stateless Function Component": {
    "prefix": "sfc",
    "body": [
      "import * as React from 'react';",
      "",
      "interface I$1Props {",
      "\t$2",
      "}",
      "",
      "const $1: React.SFC<I$1Props> = ($3) => {",
      "\treturn ( $0 );",
      "}",
      "",
      "export default $1;"
    ],
    "description": "Stateless Function Component"
  },

  "componentDidMount": {
    "prefix": "cdm",
    "body": ["componentDidMount() {", "\t$0", "}"],
    "description": "componentDidMount"
  },

  "getDerivedStateFromProps": {
    "prefix": "gds",
    "body": [
      "static getDerivedStateFromProps(nextProps: I$1Props, prevState: I$1State) {",
      "\t$0",
      "}"
    ],
    "description": "getDerivedStateFromProps"
  },

  "shouldComponentUpdate": {
    "prefix": "scu",
    "body": ["shouldComponentUpdate(nextProps: I$1Props, nextState: I$1State) {", "\t$0", "}"],
    "description": "shouldComponentUpdate"
  },

  "componentDidUpdate": {
    "prefix": "cdu",
    "body": ["componentDidUpdate(prevProps: I$1Props, prevState: I$1State) {", "\t$0", "}"],
    "description": "componentDidUpdate"
  },

  "componentWillUnmount": {
    "prefix": "cwun",
    "body": ["componentWillUnmount() {", "\t$0", "}"],
    "description": "componentWillUnmount"
  },

  "componentDidCatch": {
    "prefix": "cdc",
    "body": ["componentDidCatch(error, info) {", "\t$0", "}"],
    "description": "componentDidCatch"
  },

  "getSnapshotBeforeUpdate": {
    "prefix": "gsbu",
    "body": ["getSnapshotBeforeUpdate(prevProps: $1Props, prevState: $1State) {", "\t$0", "}"],
    "description": "getSnapshotBeforeUpdate"
  },

  "setState": {
    "prefix": "ss",
    "body": ["this.setState({ $1: $2 });"],
    "description": "setState"
  },

  "Functional setState": {
    "prefix": "ssf",
    "body": ["this.setState(prevState => {", "\treturn { $1: prevState.$1 };", "});"],
    "description": "Functional setState"
  },

  "render": {
    "prefix": "ren",
    "body": ["public render() {", "\treturn (", "\t\t $0", "\t);", "}"],
    "description": "render"
  },

  "Render Prop": {
    "prefix": "rprop",
    "body": [
      "export interface $1Props {",
      "\trender: (state: $1State) => JSX.Element",
      "}",
      "",
      "export interface $1State {",
      "\t$2",
      "}",
      "",
      "class $1 extends React.Component<$1Props, $1State> {",
      "\tstate = { $3: $4 }",
      "\trender() { ",
      "\t\treturn this.props.render(this.state);",
      "\t}",
      "}",
      "",
      "export default $1;"
    ],
    "description": "Render Prop"
  }
}
